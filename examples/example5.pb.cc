// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: example5.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "example5.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Simple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Simple_reflection_ = NULL;
const ::google::protobuf::Descriptor* Invoice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Invoice_reflection_ = NULL;
const ::google::protobuf::Descriptor* Invoice_Line_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Invoice_Line_reflection_ = NULL;
const ::google::protobuf::Descriptor* Invoice_Company_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Invoice_Company_reflection_ = NULL;
const ::google::protobuf::Descriptor* Nested_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Nested_reflection_ = NULL;
const ::google::protobuf::Descriptor* Nested_Line_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Nested_Line_reflection_ = NULL;
const ::google::protobuf::Descriptor* Nested_Line_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Nested_Line_Item_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_example5_2eproto() {
  protobuf_AddDesc_example5_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "example5.proto");
  GOOGLE_CHECK(file != NULL);
  Simple_descriptor_ = file->message_type(0);
  static const int Simple_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Simple, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Simple, age_),
  };
  Simple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Simple_descriptor_,
      Simple::default_instance_,
      Simple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Simple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Simple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Simple));
  Invoice_descriptor_ = file->message_type(1);
  static const int Invoice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice, lines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice, invoice_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice, company_),
  };
  Invoice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Invoice_descriptor_,
      Invoice::default_instance_,
      Invoice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Invoice));
  Invoice_Line_descriptor_ = Invoice_descriptor_->nested_type(0);
  static const int Invoice_Line_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice_Line, item_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice_Line, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice_Line, amount_),
  };
  Invoice_Line_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Invoice_Line_descriptor_,
      Invoice_Line::default_instance_,
      Invoice_Line_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice_Line, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice_Line, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Invoice_Line));
  Invoice_Company_descriptor_ = Invoice_descriptor_->nested_type(1);
  static const int Invoice_Company_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice_Company, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice_Company, street_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice_Company, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice_Company, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice_Company, zip_),
  };
  Invoice_Company_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Invoice_Company_descriptor_,
      Invoice_Company::default_instance_,
      Invoice_Company_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice_Company, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invoice_Company, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Invoice_Company));
  Nested_descriptor_ = file->message_type(2);
  static const int Nested_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nested, lines_),
  };
  Nested_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Nested_descriptor_,
      Nested::default_instance_,
      Nested_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nested, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nested, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Nested));
  Nested_Line_descriptor_ = Nested_descriptor_->nested_type(0);
  static const int Nested_Line_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nested_Line, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nested_Line, items_),
  };
  Nested_Line_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Nested_Line_descriptor_,
      Nested_Line::default_instance_,
      Nested_Line_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nested_Line, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nested_Line, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Nested_Line));
  Nested_Line_Item_descriptor_ = Nested_Line_descriptor_->nested_type(0);
  static const int Nested_Line_Item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nested_Line_Item, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nested_Line_Item, value_),
  };
  Nested_Line_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Nested_Line_Item_descriptor_,
      Nested_Line_Item::default_instance_,
      Nested_Line_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nested_Line_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nested_Line_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Nested_Line_Item));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_example5_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Simple_descriptor_, &Simple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Invoice_descriptor_, &Invoice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Invoice_Line_descriptor_, &Invoice_Line::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Invoice_Company_descriptor_, &Invoice_Company::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Nested_descriptor_, &Nested::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Nested_Line_descriptor_, &Nested_Line::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Nested_Line_Item_descriptor_, &Nested_Line_Item::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_example5_2eproto() {
  delete Simple::default_instance_;
  delete Simple_reflection_;
  delete Invoice::default_instance_;
  delete Invoice_reflection_;
  delete Invoice_Line::default_instance_;
  delete Invoice_Line_reflection_;
  delete Invoice_Company::default_instance_;
  delete Invoice_Company_reflection_;
  delete Nested::default_instance_;
  delete Nested_reflection_;
  delete Nested_Line::default_instance_;
  delete Nested_Line_reflection_;
  delete Nested_Line_Item::default_instance_;
  delete Nested_Line_Item_reflection_;
}

void protobuf_AddDesc_example5_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016example5.proto\"#\n\006Simple\022\014\n\004name\030\001 \001(\t"
    "\022\013\n\003age\030\002 \001(\r\"\365\001\n\007Invoice\022\034\n\005lines\030\001 \003(\013"
    "2\r.Invoice.Line\022\026\n\016invoice_number\030\002 \001(\003\022"
    "!\n\007company\030\003 \001(\0132\020.Invoice.Company\032>\n\004Li"
    "ne\022\021\n\titem_code\030\001 \001(\t\022\023\n\013description\030\002 \001"
    "(\t\022\016\n\006amount\030\003 \001(\t\032Q\n\007Company\022\014\n\004name\030\001 "
    "\001(\t\022\016\n\006street\030\002 \001(\t\022\014\n\004city\030\003 \001(\t\022\r\n\005sta"
    "te\030\004 \001(\t\022\013\n\003zip\030\005 \001(\t\"\203\001\n\006Nested\022\033\n\005line"
    "s\030\001 \003(\0132\014.Nested.Line\032\\\n\004Line\022\r\n\005title\030\001"
    " \001(\t\022 \n\005items\030\002 \003(\0132\021.Nested.Line.Item\032#"
    "\n\004Item\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t", 435);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "example5.proto", &protobuf_RegisterTypes);
  Simple::default_instance_ = new Simple();
  Invoice::default_instance_ = new Invoice();
  Invoice_Line::default_instance_ = new Invoice_Line();
  Invoice_Company::default_instance_ = new Invoice_Company();
  Nested::default_instance_ = new Nested();
  Nested_Line::default_instance_ = new Nested_Line();
  Nested_Line_Item::default_instance_ = new Nested_Line_Item();
  Simple::default_instance_->InitAsDefaultInstance();
  Invoice::default_instance_->InitAsDefaultInstance();
  Invoice_Line::default_instance_->InitAsDefaultInstance();
  Invoice_Company::default_instance_->InitAsDefaultInstance();
  Nested::default_instance_->InitAsDefaultInstance();
  Nested_Line::default_instance_->InitAsDefaultInstance();
  Nested_Line_Item::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_example5_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_example5_2eproto {
  StaticDescriptorInitializer_example5_2eproto() {
    protobuf_AddDesc_example5_2eproto();
  }
} static_descriptor_initializer_example5_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Simple::kNameFieldNumber;
const int Simple::kAgeFieldNumber;
#endif  // !_MSC_VER

Simple::Simple()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Simple)
}

void Simple::InitAsDefaultInstance() {
}

Simple::Simple(const Simple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Simple)
}

void Simple::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  age_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Simple::~Simple() {
  // @@protoc_insertion_point(destructor:Simple)
  SharedDtor();
}

void Simple::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Simple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Simple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Simple_descriptor_;
}

const Simple& Simple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example5_2eproto();
  return *default_instance_;
}

Simple* Simple::default_instance_ = NULL;

Simple* Simple::New() const {
  return new Simple;
}

void Simple::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    age_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Simple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Simple)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_age;
        break;
      }

      // optional uint32 age = 2;
      case 2: {
        if (tag == 16) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Simple)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Simple)
  return false;
#undef DO_
}

void Simple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Simple)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 age = 2;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->age(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Simple)
}

::google::protobuf::uint8* Simple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Simple)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 age = 2;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->age(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Simple)
  return target;
}

int Simple::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 age = 2;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Simple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Simple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Simple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Simple::MergeFrom(const Simple& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Simple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Simple::CopyFrom(const Simple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Simple::IsInitialized() const {

  return true;
}

void Simple::Swap(Simple* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(age_, other->age_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Simple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Simple_descriptor_;
  metadata.reflection = Simple_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Invoice_Line::kItemCodeFieldNumber;
const int Invoice_Line::kDescriptionFieldNumber;
const int Invoice_Line::kAmountFieldNumber;
#endif  // !_MSC_VER

Invoice_Line::Invoice_Line()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Invoice.Line)
}

void Invoice_Line::InitAsDefaultInstance() {
}

Invoice_Line::Invoice_Line(const Invoice_Line& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Invoice.Line)
}

void Invoice_Line::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  item_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Invoice_Line::~Invoice_Line() {
  // @@protoc_insertion_point(destructor:Invoice.Line)
  SharedDtor();
}

void Invoice_Line::SharedDtor() {
  if (item_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete item_code_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (amount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete amount_;
  }
  if (this != default_instance_) {
  }
}

void Invoice_Line::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Invoice_Line::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Invoice_Line_descriptor_;
}

const Invoice_Line& Invoice_Line::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example5_2eproto();
  return *default_instance_;
}

Invoice_Line* Invoice_Line::default_instance_ = NULL;

Invoice_Line* Invoice_Line::New() const {
  return new Invoice_Line;
}

void Invoice_Line::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_item_code()) {
      if (item_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        item_code_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_amount()) {
      if (amount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        amount_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Invoice_Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Invoice.Line)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string item_code = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->item_code().data(), this->item_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "item_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_amount;
        break;
      }

      // optional string amount = 3;
      case 3: {
        if (tag == 26) {
         parse_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->amount().data(), this->amount().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "amount");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Invoice.Line)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Invoice.Line)
  return false;
#undef DO_
}

void Invoice_Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Invoice.Line)
  // optional string item_code = 1;
  if (has_item_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_code().data(), this->item_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "item_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->item_code(), output);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional string amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "amount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Invoice.Line)
}

::google::protobuf::uint8* Invoice_Line::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Invoice.Line)
  // optional string item_code = 1;
  if (has_item_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_code().data(), this->item_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "item_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->item_code(), target);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional string amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "amount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Invoice.Line)
  return target;
}

int Invoice_Line::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string item_code = 1;
    if (has_item_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_code());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Invoice_Line::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Invoice_Line* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Invoice_Line*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Invoice_Line::MergeFrom(const Invoice_Line& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_code()) {
      set_item_code(from.item_code());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Invoice_Line::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Invoice_Line::CopyFrom(const Invoice_Line& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Invoice_Line::IsInitialized() const {

  return true;
}

void Invoice_Line::Swap(Invoice_Line* other) {
  if (other != this) {
    std::swap(item_code_, other->item_code_);
    std::swap(description_, other->description_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Invoice_Line::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Invoice_Line_descriptor_;
  metadata.reflection = Invoice_Line_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Invoice_Company::kNameFieldNumber;
const int Invoice_Company::kStreetFieldNumber;
const int Invoice_Company::kCityFieldNumber;
const int Invoice_Company::kStateFieldNumber;
const int Invoice_Company::kZipFieldNumber;
#endif  // !_MSC_VER

Invoice_Company::Invoice_Company()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Invoice.Company)
}

void Invoice_Company::InitAsDefaultInstance() {
}

Invoice_Company::Invoice_Company(const Invoice_Company& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Invoice.Company)
}

void Invoice_Company::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  street_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Invoice_Company::~Invoice_Company() {
  // @@protoc_insertion_point(destructor:Invoice.Company)
  SharedDtor();
}

void Invoice_Company::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (street_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete street_;
  }
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_;
  }
  if (zip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete zip_;
  }
  if (this != default_instance_) {
  }
}

void Invoice_Company::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Invoice_Company::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Invoice_Company_descriptor_;
}

const Invoice_Company& Invoice_Company::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example5_2eproto();
  return *default_instance_;
}

Invoice_Company* Invoice_Company::default_instance_ = NULL;

Invoice_Company* Invoice_Company::New() const {
  return new Invoice_Company;
}

void Invoice_Company::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_street()) {
      if (street_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        street_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        state_->clear();
      }
    }
    if (has_zip()) {
      if (zip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        zip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Invoice_Company::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Invoice.Company)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_street;
        break;
      }

      // optional string street = 2;
      case 2: {
        if (tag == 18) {
         parse_street:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_street()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->street().data(), this->street().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "street");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_city;
        break;
      }

      // optional string city = 3;
      case 3: {
        if (tag == 26) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_state;
        break;
      }

      // optional string state = 4;
      case 4: {
        if (tag == 34) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "state");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_zip;
        break;
      }

      // optional string zip = 5;
      case 5: {
        if (tag == 42) {
         parse_zip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->zip().data(), this->zip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Invoice.Company)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Invoice.Company)
  return false;
#undef DO_
}

void Invoice_Company::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Invoice.Company)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string street = 2;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "street");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->street(), output);
  }

  // optional string city = 3;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->city(), output);
  }

  // optional string state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->state(), output);
  }

  // optional string zip = 5;
  if (has_zip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zip().data(), this->zip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->zip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Invoice.Company)
}

::google::protobuf::uint8* Invoice_Company::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Invoice.Company)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string street = 2;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "street");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->street(), target);
  }

  // optional string city = 3;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->city(), target);
  }

  // optional string state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->state(), target);
  }

  // optional string zip = 5;
  if (has_zip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zip().data(), this->zip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->zip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Invoice.Company)
  return target;
}

int Invoice_Company::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string street = 2;
    if (has_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->street());
    }

    // optional string city = 3;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

    // optional string zip = 5;
    if (has_zip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Invoice_Company::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Invoice_Company* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Invoice_Company*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Invoice_Company::MergeFrom(const Invoice_Company& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_street()) {
      set_street(from.street());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_zip()) {
      set_zip(from.zip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Invoice_Company::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Invoice_Company::CopyFrom(const Invoice_Company& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Invoice_Company::IsInitialized() const {

  return true;
}

void Invoice_Company::Swap(Invoice_Company* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(street_, other->street_);
    std::swap(city_, other->city_);
    std::swap(state_, other->state_);
    std::swap(zip_, other->zip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Invoice_Company::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Invoice_Company_descriptor_;
  metadata.reflection = Invoice_Company_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Invoice::kLinesFieldNumber;
const int Invoice::kInvoiceNumberFieldNumber;
const int Invoice::kCompanyFieldNumber;
#endif  // !_MSC_VER

Invoice::Invoice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Invoice)
}

void Invoice::InitAsDefaultInstance() {
  company_ = const_cast< ::Invoice_Company*>(&::Invoice_Company::default_instance());
}

Invoice::Invoice(const Invoice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Invoice)
}

void Invoice::SharedCtor() {
  _cached_size_ = 0;
  invoice_number_ = GOOGLE_LONGLONG(0);
  company_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Invoice::~Invoice() {
  // @@protoc_insertion_point(destructor:Invoice)
  SharedDtor();
}

void Invoice::SharedDtor() {
  if (this != default_instance_) {
    delete company_;
  }
}

void Invoice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Invoice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Invoice_descriptor_;
}

const Invoice& Invoice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example5_2eproto();
  return *default_instance_;
}

Invoice* Invoice::default_instance_ = NULL;

Invoice* Invoice::New() const {
  return new Invoice;
}

void Invoice::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    invoice_number_ = GOOGLE_LONGLONG(0);
    if (has_company()) {
      if (company_ != NULL) company_->::Invoice_Company::Clear();
    }
  }
  lines_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Invoice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Invoice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Invoice.Line lines = 1;
      case 1: {
        if (tag == 10) {
         parse_lines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lines()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_lines;
        if (input->ExpectTag(16)) goto parse_invoice_number;
        break;
      }

      // optional int64 invoice_number = 2;
      case 2: {
        if (tag == 16) {
         parse_invoice_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &invoice_number_)));
          set_has_invoice_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_company;
        break;
      }

      // optional .Invoice.Company company = 3;
      case 3: {
        if (tag == 26) {
         parse_company:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_company()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Invoice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Invoice)
  return false;
#undef DO_
}

void Invoice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Invoice)
  // repeated .Invoice.Line lines = 1;
  for (int i = 0; i < this->lines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lines(i), output);
  }

  // optional int64 invoice_number = 2;
  if (has_invoice_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->invoice_number(), output);
  }

  // optional .Invoice.Company company = 3;
  if (has_company()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->company(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Invoice)
}

::google::protobuf::uint8* Invoice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Invoice)
  // repeated .Invoice.Line lines = 1;
  for (int i = 0; i < this->lines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lines(i), target);
  }

  // optional int64 invoice_number = 2;
  if (has_invoice_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->invoice_number(), target);
  }

  // optional .Invoice.Company company = 3;
  if (has_company()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->company(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Invoice)
  return target;
}

int Invoice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 invoice_number = 2;
    if (has_invoice_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->invoice_number());
    }

    // optional .Invoice.Company company = 3;
    if (has_company()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->company());
    }

  }
  // repeated .Invoice.Line lines = 1;
  total_size += 1 * this->lines_size();
  for (int i = 0; i < this->lines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lines(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Invoice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Invoice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Invoice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Invoice::MergeFrom(const Invoice& from) {
  GOOGLE_CHECK_NE(&from, this);
  lines_.MergeFrom(from.lines_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_invoice_number()) {
      set_invoice_number(from.invoice_number());
    }
    if (from.has_company()) {
      mutable_company()->::Invoice_Company::MergeFrom(from.company());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Invoice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Invoice::CopyFrom(const Invoice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Invoice::IsInitialized() const {

  return true;
}

void Invoice::Swap(Invoice* other) {
  if (other != this) {
    lines_.Swap(&other->lines_);
    std::swap(invoice_number_, other->invoice_number_);
    std::swap(company_, other->company_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Invoice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Invoice_descriptor_;
  metadata.reflection = Invoice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Nested_Line_Item::kNameFieldNumber;
const int Nested_Line_Item::kValueFieldNumber;
#endif  // !_MSC_VER

Nested_Line_Item::Nested_Line_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nested.Line.Item)
}

void Nested_Line_Item::InitAsDefaultInstance() {
}

Nested_Line_Item::Nested_Line_Item(const Nested_Line_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Nested.Line.Item)
}

void Nested_Line_Item::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Nested_Line_Item::~Nested_Line_Item() {
  // @@protoc_insertion_point(destructor:Nested.Line.Item)
  SharedDtor();
}

void Nested_Line_Item::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Nested_Line_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Nested_Line_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Nested_Line_Item_descriptor_;
}

const Nested_Line_Item& Nested_Line_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example5_2eproto();
  return *default_instance_;
}

Nested_Line_Item* Nested_Line_Item::default_instance_ = NULL;

Nested_Line_Item* Nested_Line_Item::New() const {
  return new Nested_Line_Item;
}

void Nested_Line_Item::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Nested_Line_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nested.Line.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nested.Line.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nested.Line.Item)
  return false;
#undef DO_
}

void Nested_Line_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nested.Line.Item)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nested.Line.Item)
}

::google::protobuf::uint8* Nested_Line_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nested.Line.Item)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nested.Line.Item)
  return target;
}

int Nested_Line_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Nested_Line_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Nested_Line_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Nested_Line_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Nested_Line_Item::MergeFrom(const Nested_Line_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Nested_Line_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Nested_Line_Item::CopyFrom(const Nested_Line_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nested_Line_Item::IsInitialized() const {

  return true;
}

void Nested_Line_Item::Swap(Nested_Line_Item* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Nested_Line_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Nested_Line_Item_descriptor_;
  metadata.reflection = Nested_Line_Item_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Nested_Line::kTitleFieldNumber;
const int Nested_Line::kItemsFieldNumber;
#endif  // !_MSC_VER

Nested_Line::Nested_Line()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nested.Line)
}

void Nested_Line::InitAsDefaultInstance() {
}

Nested_Line::Nested_Line(const Nested_Line& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Nested.Line)
}

void Nested_Line::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Nested_Line::~Nested_Line() {
  // @@protoc_insertion_point(destructor:Nested.Line)
  SharedDtor();
}

void Nested_Line::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void Nested_Line::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Nested_Line::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Nested_Line_descriptor_;
}

const Nested_Line& Nested_Line::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example5_2eproto();
  return *default_instance_;
}

Nested_Line* Nested_Line::default_instance_ = NULL;

Nested_Line* Nested_Line::New() const {
  return new Nested_Line;
}

void Nested_Line::Clear() {
  if (has_title()) {
    if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      title_->clear();
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Nested_Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nested.Line)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .Nested.Line.Item items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nested.Line)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nested.Line)
  return false;
#undef DO_
}

void Nested_Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nested.Line)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // repeated .Nested.Line.Item items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nested.Line)
}

::google::protobuf::uint8* Nested_Line::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nested.Line)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // repeated .Nested.Line.Item items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nested.Line)
  return target;
}

int Nested_Line::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

  }
  // repeated .Nested.Line.Item items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Nested_Line::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Nested_Line* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Nested_Line*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Nested_Line::MergeFrom(const Nested_Line& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Nested_Line::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Nested_Line::CopyFrom(const Nested_Line& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nested_Line::IsInitialized() const {

  return true;
}

void Nested_Line::Swap(Nested_Line* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Nested_Line::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Nested_Line_descriptor_;
  metadata.reflection = Nested_Line_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Nested::kLinesFieldNumber;
#endif  // !_MSC_VER

Nested::Nested()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nested)
}

void Nested::InitAsDefaultInstance() {
}

Nested::Nested(const Nested& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Nested)
}

void Nested::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Nested::~Nested() {
  // @@protoc_insertion_point(destructor:Nested)
  SharedDtor();
}

void Nested::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Nested::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Nested::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Nested_descriptor_;
}

const Nested& Nested::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example5_2eproto();
  return *default_instance_;
}

Nested* Nested::default_instance_ = NULL;

Nested* Nested::New() const {
  return new Nested;
}

void Nested::Clear() {
  lines_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Nested::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nested)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Nested.Line lines = 1;
      case 1: {
        if (tag == 10) {
         parse_lines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lines()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_lines;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nested)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nested)
  return false;
#undef DO_
}

void Nested::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nested)
  // repeated .Nested.Line lines = 1;
  for (int i = 0; i < this->lines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lines(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nested)
}

::google::protobuf::uint8* Nested::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nested)
  // repeated .Nested.Line lines = 1;
  for (int i = 0; i < this->lines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lines(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nested)
  return target;
}

int Nested::ByteSize() const {
  int total_size = 0;

  // repeated .Nested.Line lines = 1;
  total_size += 1 * this->lines_size();
  for (int i = 0; i < this->lines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lines(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Nested::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Nested* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Nested*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Nested::MergeFrom(const Nested& from) {
  GOOGLE_CHECK_NE(&from, this);
  lines_.MergeFrom(from.lines_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Nested::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Nested::CopyFrom(const Nested& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nested::IsInitialized() const {

  return true;
}

void Nested::Swap(Nested* other) {
  if (other != this) {
    lines_.Swap(&other->lines_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Nested::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Nested_descriptor_;
  metadata.reflection = Nested_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
